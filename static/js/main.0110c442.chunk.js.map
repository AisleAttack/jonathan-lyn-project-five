{"version":3,"sources":["firebase.js","DepartmentList.js","InputNewItem.js","RemoveItem.js","UpdateItem.js","App.js","reportWebVitals.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","DepartmentList","value","disabled","Component","InputNewItem","handleInputChange","e","setState","userInput","target","handleDeptChange","dept","handleSubmit","preventDefault","itemNotCompletedArray","state","database","ref","child","push","onSubmit","this","className","htmlFor","type","id","onChange","placeholder","required","name","aria-label","icon","RemoveItem","remove","onClick","UpdateItem","handleShowDropdown","item","props","updatedItem","Object","values","showDropdownBool","showDropdown","itemToEdit","console","log","handleDeptUpdate","newDept","handleUpdateSubmit","deletePath","itemKey","updatedItemNotCompletedArray","dbRef","library","add","farEdit","farSave","farTrashAlt","farCheckSquare","farSquare","faPlusSquare","farMinusSquare","App","removeItemFromDb","deptOrAisle","on","data","val","departments","markCompleted","bool","completePath","update","0","enterItemError","firebaseDataObject","deptArray","keys","map","key","singleDept","i","itemsArray","completed","idKey","itemIds","index","href","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0110c442.chunk.js","sourcesContent":["// firebase.js\r\nimport firebase from 'firebase/app';\r\nimport 'firebase/database';\r\n\r\n// initialize Firebase\r\nconst firebaseConfig = {\r\n    apiKey: \"AIzaSyD8udE2U7TL4QkyIKPVceMFJozTsSvu9jQ\",\r\n    authDomain: \"jonathanlynprojectfive.firebaseapp.com\",\r\n    databaseURL: \"https://jonathanlynprojectfive.firebaseio.com\",\r\n    projectId: \"jonathanlynprojectfive\",\r\n    storageBucket: \"jonathanlynprojectfive.appspot.com\",\r\n    messagingSenderId: \"374788941465\",\r\n    appId: \"1:374788941465:web:ed5d089d392b3035eafa08\"\r\n};\r\nfirebase.initializeApp(firebaseConfig);\r\n\r\nexport default firebase;","import { Component, Fragment } from 'react';\r\n\r\nclass DepartmentList extends Component {\r\n    render() { \r\n        return (\r\n            <Fragment>\r\n                <option value=\"placeholder\" disabled>Choose location</option>\r\n                <option value=\"Don't know\">Don't know</option>\r\n                <option value=\"Deli\">Deli</option>\r\n                <option value=\"Meat\">Meat</option>\r\n                <option value=\"Produce\">Produce</option>\r\n                <option value=\"Seafood\">Seafood</option>\r\n            </Fragment>\r\n        )\r\n    }\r\n}\r\n\r\nexport default DepartmentList;","import { Component } from 'react';\r\nimport firebase from './firebase.js';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport DepartmentList from './DepartmentList.js';\r\n\r\nclass InputNewItem extends Component {\r\n\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            userInput: '',\r\n            dept: \"Don't know\",\r\n        }\r\n    }\r\n\r\n    handleInputChange = (e) => {\r\n        this.setState({\r\n            userInput: e.target.value\r\n        }) \r\n    }\r\n\r\n    handleDeptChange = (e) => {\r\n        this.setState({\r\n            dept: e.target.value\r\n        })\r\n    }\r\n\r\n    handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        let inputted = this.state.userInput\r\n        let itemNotCompletedArray = [false, inputted]\r\n        const dbRef = firebase.database().ref();\r\n        dbRef.child(this.state.dept).push(itemNotCompletedArray);\r\n        this.setState({\r\n            userInput: ''\r\n        })\r\n    }\r\n\r\n    render() { \r\n        return (\r\n            <form onSubmit={(this.state.userInput !== '') ? this.handleSubmit : null} className='newItemForm'>\r\n                <div className='itemInput'>\r\n                    <label htmlFor=\"newItem\">Enter item: </label>\r\n                    <input \r\n                        type=\"text\"\r\n                        id='newItem'\r\n                        value={this.state.userInput}\r\n                        onChange={this.handleInputChange}\r\n                        placeholder=\"Please enter an item\"\r\n                        required\r\n                    />\r\n                </div>\r\n                <div className='deptInput'>\r\n                    <label htmlFor=\"location\"> Dept / aisle: </label>\r\n                    <select \r\n                    name=\"location\" id=\"location\" \r\n                    onChange={this.handleDeptChange} \r\n                    value={this.state.dept}>\r\n                        <DepartmentList />\r\n                    </select>\r\n\r\n                    <button className='addButton' aria-label='add item to list'>\r\n                        <FontAwesomeIcon      \r\n                            icon={[\"far\", \"plus-square\"]} \r\n                            type=\"submit\" \r\n                        />      \r\n                    </button>\r\n                </div>\r\n            </form>\r\n        )\r\n    }\r\n}\r\n\r\nexport default InputNewItem;","import { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\n\r\nconst RemoveItem = ({ remove }) => {\r\n        return (\r\n            <button onClick={ remove } aria-label='delete item from list'><FontAwesomeIcon icon={[\"far\", \"minus-square\"]}/></button>\r\n        )\r\n    }\r\n\r\nexport default RemoveItem;","import { Component } from 'react';\r\nimport firebase from \"./firebase.js\";\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport DepartmentList from './DepartmentList.js';\r\n\r\nclass UpdateItem extends Component {\r\n\r\n    constructor() {\r\n        super()\r\n        this.state = {\r\n            itemToEdit: '',\r\n            newDept: 'Unknown',\r\n            showDropdown: false\r\n        }\r\n    }\r\n\r\n    handleShowDropdown = (e) => {\r\n        e.preventDefault();\r\n        const { item } = this.props;\r\n        let updatedItem = Object.values({ item })\r\n        let showDropdownBool = this.state.showDropdown\r\n        this.setState({\r\n            itemToEdit: updatedItem[0],\r\n            showDropdown: !showDropdownBool\r\n        })\r\n        console.log(showDropdownBool)\r\n    }\r\n\r\n\r\n    handleDeptUpdate = (e) => {\r\n        // const { item } = this.props;\r\n        // let updatedItem = Object.values({ item })\r\n        this.setState({\r\n            newDept: e.target.value,\r\n            // itemToEdit: updatedItem[0]\r\n        })\r\n        // console.log('values', Object.values({ item }))\r\n        // console.log(updatedItem[0])\r\n        // console.log(this.state.itemToEdit)\r\n    }\r\n\r\n    handleUpdateSubmit = (e) => {\r\n        let deletePath = `/${this.props.dept}/${this.props.itemKey}/`\r\n        e.preventDefault();\r\n        let newInputted = this.state.itemToEdit\r\n        let updatedItemNotCompletedArray = [true, newInputted]\r\n        const dbRef = firebase.database().ref();\r\n        dbRef.child(this.state.newDept).push(updatedItemNotCompletedArray)\r\n        dbRef.child(deletePath).remove()\r\n    }\r\n\r\n\r\n    render() { \r\n        return (\r\n            <div>\r\n                <button onClick={this.handleShowDropdown} className=\"edit\" aria-label='edit department'>\r\n                    <FontAwesomeIcon  icon= {[\"far\", \"edit\"]} />\r\n                </button>\r\n                {\r\n                    (this.state.showDropdown)\r\n                    ? <form>\r\n                        <label htmlFor=\"location\"> Change location: </label>\r\n                        <select name=\"location\" id=\"location\" onChange={this.handleDeptUpdate}>\r\n                            <DepartmentList />\r\n                        </select>\r\n                        <button onClick={this.handleUpdateSubmit} className=\"save\" aria-label='save department change'>\r\n                            <FontAwesomeIcon icon={[\"far\", \"save\"]} />     \r\n                        </button>\r\n                    </form>\r\n                    : null\r\n                }\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default UpdateItem;\r\n\r\n\r\n","import './App.scss';\r\nimport { Component } from 'react';\r\nimport firebase from './firebase.js';\r\nimport InputNewItem from './InputNewItem.js';\r\nimport RemoveItem from './RemoveItem.js';\r\nimport UpdateItem from './UpdateItem.js';\r\nimport { library } from '@fortawesome/fontawesome-svg-core';\r\nimport { faEdit as farEdit, faSave as farSave, faTrashAlt as farTrashAlt, faCheckSquare as farCheckSquare, faSquare as farSquare, faPlusSquare, faMinusSquare as farMinusSquare } from '@fortawesome/free-regular-svg-icons'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\n\r\nlibrary.add(farEdit, farSave, farTrashAlt, farCheckSquare, farSquare, faPlusSquare, farMinusSquare);\r\n\r\nclass App extends Component {\r\n\r\n  constructor() {\r\n    super();\r\n    this.state = { \r\n      departments: [],\r\n      enterItemError: '',\r\n      newDept: ''\r\n    }\r\n  }\r\n\r\n  // connect to Firebase and get existing and updated data from the database\r\n  componentDidMount() {\r\n    const dbRef = firebase.database().ref();\r\n    dbRef.on('value', (data) => {\r\n      const firebaseDataObject = data.val();\r\n      if (firebaseDataObject === null) {\r\n        this.setState({\r\n          enterItemError: 'Enter an item to your list'\r\n        }) \r\n      } else {\r\n        let deptArray = Object.keys(firebaseDataObject).map((key) => {\r\n          return [(key), firebaseDataObject[key]];\r\n        })\r\n        this.setState({\r\n          departments: deptArray,\r\n          enterItemError: ''\r\n        })\r\n      }\r\n    })\r\n  }\r\n\r\n  removeItemFromDb = (itemKey, dept) => {\r\n    const dbRef = firebase.database().ref();\r\n    let deptOrAisle = `/${dept[0]}/`;\r\n    dbRef.child(deptOrAisle + itemKey).remove();\r\n    dbRef.on('value', (data) => {\r\n      const firebaseDataObject = data.val();\r\n      if (firebaseDataObject === null) {\r\n        this.setState({\r\n        departments: []\r\n      })\r\n      }\r\n    })\r\n  }\r\n\r\n  markCompleted = (itemKey, dept, bool) => {\r\n    const dbRef = firebase.database().ref();\r\n    let completePath = `/${dept[0]}/${itemKey}/`;\r\n    if (bool === false) {\r\n      dbRef.child(completePath).update({0: true});\r\n    } else {\r\n      dbRef.child(completePath).update({0: false});\r\n    }\r\n    console.log(this.state.enterItemError)\r\n  }\r\n\r\n  \r\n\r\n  render() { \r\n    return (\r\n      <section >\r\n        <header>\r\n          <h1>Aisle <span className='attack'>Attack!</span></h1>\r\n          <h2>A grocery list that stores the location of the stuff you want</h2>\r\n        </header>\r\n\r\n        <main >\r\n        \r\n          <InputNewItem />\r\n\r\n          <section className='wrapper'>\r\n\r\n          \r\n            <h2>{this.state.enterItemError}</h2> \r\n\r\n            {\r\n              this.state.departments.map((singleDept, i) => {\r\n                let dept = singleDept;\r\n                let itemsArray = [];\r\n                let completed = []\r\n                for (let idKey in singleDept[1]) {\r\n                  const itemIds = [idKey, singleDept[1][idKey]];\r\n                  itemsArray.push(itemIds);\r\n                  completed.push(singleDept[1][idKey][0]);\r\n                } \r\n                return (\r\n                  <div key={i}>\r\n                    <ul>\r\n                      <li>\r\n                        <h3 className='location'>{singleDept[0]}</h3>\r\n                          {\r\n                            itemsArray.map((item, index) => {\r\n                              return (\r\n                                <ul key={item[0]}>\r\n                                  <li className='addedItem'>\r\n\r\n                                        <UpdateItem\r\n                                      item={item[1][1]}\r\n                                      itemKey={item[0]} \r\n                                      dept={dept[0]}\r\n                                    />\r\n\r\n                                    <div className='itemAndCheck' onClick={ () => { this.markCompleted(item[0], dept, item[1][0]) }}>\r\n\r\n                                      <button aria-label='toggle completed'>\r\n                                        <FontAwesomeIcon icon={ (completed[index]) ? ['far', 'check-square'] : ['far', 'square'] }/>\r\n                                      </button>\r\n\r\n                                      <p className={ (completed[index]) ? 'done' : 'notDone' }>\r\n                                        {item[1]}\r\n                                      </p>\r\n\r\n                                    </div>\r\n                                \r\n                                    <RemoveItem         \r\n                                      remove={ () => {\r\n                                        this.removeItemFromDb(item[0], dept) \r\n                                      }}\r\n                                    />\r\n                                  \r\n                                \r\n\r\n                                  </li>\r\n                                </ul>\r\n                              )\r\n                            })\r\n                          }\r\n                      </li>\r\n                    </ul>\r\n                  </div>\r\n                )\r\n              })\r\n            }\r\n          </section>\r\n        </main>\r\n        <footer>\r\n          Crafted by <a href='www.jonraftsode.com'>jonCraftsCode</a> at <a href='www.junocollege.com'>Juno college</a>\r\n        </footer>\r\n      </section>\r\n    )\r\n  }\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n// import './feast-of-flesh';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}