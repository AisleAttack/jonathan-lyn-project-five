{"version":3,"sources":["firebase.js","InputNewItem.js","App.js","reportWebVitals.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","InputNewItem","handleInputChange","e","setState","userInput","target","value","handleDeptChange","dept","handleSubmit","preventDefault","itemNotCompletedArray","state","database","ref","child","push","htmlFor","type","id","this","onChange","name","onClick","Component","App","removeItemFromDb","itemKey","dbRef","deptOrAisle","console","log","remove","on","data","val","departments","markCompleted","completePath","update","0","updateItem","newDept","newDepartment","enterItem","firebaseDataObject","deptArray","Object","keys","map","key","objects","objectsArray","values","forEach","itemArray","className","singleDept","i","itemsArray","idKey","itemIds","item","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.aa3b27a7.chunk.js","sourcesContent":["// firebase.js\r\nimport firebase from 'firebase/app';\r\nimport 'firebase/database';\r\n\r\n// initialize Firebase\r\nconst firebaseConfig = {\r\n    apiKey: \"AIzaSyD8udE2U7TL4QkyIKPVceMFJozTsSvu9jQ\",\r\n    authDomain: \"jonathanlynprojectfive.firebaseapp.com\",\r\n    databaseURL: \"https://jonathanlynprojectfive.firebaseio.com\",\r\n    projectId: \"jonathanlynprojectfive\",\r\n    storageBucket: \"jonathanlynprojectfive.appspot.com\",\r\n    messagingSenderId: \"374788941465\",\r\n    appId: \"1:374788941465:web:ed5d089d392b3035eafa08\"\r\n};\r\nfirebase.initializeApp(firebaseConfig);\r\n\r\nexport default firebase;","import { Component } from 'react';\r\nimport firebase from './firebase.js';\r\nimport App from './App.js';\r\n\r\n\r\nclass InputNewItem extends Component {\r\n\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            userInput: '',\r\n            dept: 'Unknown',\r\n            // itemNotComplete: []\r\n        }\r\n    }\r\n\r\n    handleInputChange = (e) => {\r\n        this.setState({\r\n            userInput: e.target.value\r\n        }) \r\n    }\r\n\r\n    handleDeptChange = (e) => {\r\n        this.setState({\r\n            dept: e.target.value\r\n        })\r\n    }\r\n\r\n    \r\n\r\n    handleSubmit = (e) => {\r\n        e.preventDefault();\r\n\r\n        let inputted = this.state.userInput\r\n\r\n        let itemNotCompletedArray = [false, inputted]\r\n\r\n        const dbRef = firebase.database().ref();\r\n        dbRef.child(this.state.dept).push(itemNotCompletedArray);\r\n\r\n       \r\n\r\n\r\n        this.setState({\r\n            userInput: ''\r\n        })\r\n    }\r\n\r\n    render() { \r\n        return (\r\n            <form>\r\n                <label htmlFor=\"newItem\">Enter new item to list: </label>\r\n                <input \r\n                    type=\"text\"\r\n                    id='newItem'\r\n                    value={this.state.userInput}\r\n                    onChange={this.handleInputChange}\r\n                />\r\n                <label htmlFor=\"location\"> Department or aisle: </label>\r\n                <select name=\"location\" id=\"location\" onChange={this.handleDeptChange}>\r\n                    <option value=\"Unknown\">Unknown</option>\r\n                    <option value=\"Deli\">Deli</option>\r\n                    <option value=\"Meat\">Meat</option>\r\n                    <option value=\"Produce\">Produce</option>\r\n                    <option value=\"Seafood\">Seafood</option>\r\n                </select>\r\n                <button onClick={this.handleSubmit}>Add item</button>      \r\n            </form>\r\n        )\r\n    }\r\n}\r\nexport default InputNewItem;","import './App.scss';\r\nimport { Component } from 'react';\r\nimport firebase from './firebase.js';\r\nimport InputNewItem from './InputNewItem.js';\r\n// import ShowList from './ShowList.js';\r\n// import RemoveItem from './RemoveItem.js'\r\n\r\nclass App extends Component {\r\n\r\n  constructor() {\r\n    super();\r\n    this.state = { \r\n      departments: [],\r\n      enterItem: '',\r\n      newDept: ''\r\n    }\r\n  }\r\n\r\n  \r\n\r\n  // connect to Firebase and get existing and updated data from the database\r\n  componentDidMount() {\r\n    const dbRef = firebase.database().ref();\r\n\r\n    dbRef.on('value', (data) => {\r\n\r\n      const firebaseDataObject = data.val();\r\n\r\n      if (firebaseDataObject === null) {\r\n        this.setState({\r\n          enterItem: 'Enter an item to your list'\r\n        }) \r\n      } else {\r\n        let deptArray = Object.keys(firebaseDataObject).map((key) => {\r\n          return [(key), firebaseDataObject[key]];\r\n        })\r\n        \r\n        this.setState({\r\n          departments: deptArray,\r\n          enterItem: ''\r\n        })\r\n      }\r\n      \r\n      const objects = this.state.departments[1][1]\r\n      console.log('OG', this.state.departments)\r\n      console.log('objects', objects)\r\n\r\n      const objectsArray = Object.values(objects).forEach((itemArray) => {\r\n        if (itemArray[0] === true) {\r\n          console.log('true')\r\n        }\r\n      })\r\n      console.log(objectsArray)\r\n\r\n      // for (let key in objects) {\r\n      //   console.log('KEY', key)\r\n\r\n      //   if (key[0] === true) {\r\n      //     console.log('TRUE')\r\n      //   }\r\n      // }\r\n\r\n      // if (this.state.departments[1] === true) {\r\n      //   console.log('true')\r\n      // }\r\n    })\r\n\r\n  }\r\n\r\n  removeItemFromDb = (itemKey, dept) => {\r\n    const dbRef = firebase.database().ref();\r\n    let deptOrAisle = `/${dept[0]}/`;\r\n\r\n    console.log(itemKey)\r\n\r\n    dbRef.child(deptOrAisle + itemKey).remove();\r\n\r\n    dbRef.on('value', (data) => {\r\n      const firebaseDataObject = data.val();\r\n\r\n      if (firebaseDataObject === null) {\r\n        this.setState({\r\n        departments: []\r\n      })\r\n      }\r\n    })\r\n  }\r\n\r\n  markCompleted = (itemKey, dept) => {\r\n    const dbRef = firebase.database().ref();\r\n    let completePath = `/${dept[0]}/${itemKey}/`;\r\n    dbRef.child(completePath).update({0: true});\r\n    console.log('dept', dept);\r\n    console.log('itemkey', itemKey)\r\n  }\r\n\r\n  updateItem = (e, dept) => {\r\n    this.setState({\r\n      newDept: e.target.value\r\n    })\r\n    const dbRef = firebase.database().ref();\r\n    // let completePath = `/${dept[0]}/${itemKey}/`;\r\n    const newDepartment = this.state.newDept\r\n\r\n    dbRef.child(dept).update({newDepartment});\r\n\r\n  }\r\n\r\n\r\n\r\n  render() { \r\n    return (\r\n      <div className='wrapper'>\r\n        <InputNewItem />\r\n        <h2>{this.state.enterItem}</h2>\r\n\r\n        {/* <button onClick={this.handleReload}>Load prior list</button> */}\r\n        {\r\n          this.state.departments.map((singleDept, i) => {\r\n            let dept = singleDept;\r\n            let itemsArray = [];\r\n            for (let idKey in singleDept[1]) {\r\n              const itemIds = [idKey, singleDept[1][idKey]]\r\n              itemsArray.push(itemIds)\r\n            }\r\n\r\n            console.log(itemsArray)\r\n\r\n\r\n            return (\r\n              \r\n              <ul key={i}>\r\n                <li>\r\n                  <p>{singleDept[0]}</p>\r\n                  \r\n                  {\r\n                    itemsArray.map((item) => {\r\n                      return (\r\n                    \r\n                          <div key={item[0]}>\r\n                            {/* {item  ?\r\n                              \r\n                              \r\n                            }\r\n                             */}\r\n                            <p className=\"item\">{item[1]}</p>\r\n                            \r\n                            <button onClick={ () => { this.removeItemFromDb(item[0], dept) }}>Remove</button>\r\n\r\n                            <button onClick={ () => { this.markCompleted(item[0], dept) } }>Complete</button>\r\n\r\n                            <label htmlFor=\"location\"> Department or aisle: </label>\r\n                            <select name=\"location\" id=\"location\" onChange={ (e) => {this.updateItem(e, dept)} }>\r\n                                <option value=\"Unknown\">Unknown</option>\r\n                                <option value=\"Deli\">Deli</option>\r\n                                <option value=\"Meat\">Meat</option>\r\n                                <option value=\"Produce\">Produce</option>\r\n                                <option value=\"Seafood\">Seafood</option>\r\n                            </select>\r\n\r\n                          </div>\r\n                            // {/* <RemoveItem \r\n                            //   item={item[1]}\r\n                            //   remove={ () => { this.removeItem(i) }}\r\n                            // /> */}\r\n                      \r\n                      \r\n                      )\r\n                    })\r\n                  }\r\n                </li>\r\n\r\n\r\n\r\n                {/* <ShowList \r\n                  dept={singleDept.dept}\r\n                  items={singleDept.items}\r\n                /> */}\r\n\r\n\r\n              </ul>\r\n            )\r\n          })\r\n        }\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}